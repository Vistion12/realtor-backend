// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PropertyStore.DataAccess;

#nullable disable

namespace PropertyStore.DataAccess.Migrations
{
    [DbContext(typeof(PropertyStoreDBContext))]
    partial class PropertyStoreDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.ClientDocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("general");

                    b.Property<Guid?>("ClientEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RequiredUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("UploadedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ClientEntityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DealId");

                    b.HasIndex("IsRequired");

                    b.HasIndex("RequiredUntil");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UploadedBy");

                    b.ToTable("ClientDocuments");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountLogin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ConsentGivenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConsentIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("ConsentToPersonalData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("HasPersonalAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAccountActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemporaryPassword")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountLogin");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.HasIndex("HasPersonalAccount");

                    b.HasIndex("IsAccountActive");

                    b.HasIndex("Phone");

                    b.HasIndex("Source");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrentStageId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("DealAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("ExpectedCloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StageDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StageStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("ExpectedCloseDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("PipelineId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StageDeadline");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromStageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TimeInStage")
                        .HasColumnType("interval");

                    b.Property<Guid>("ToStageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt");

                    b.HasIndex("DealId");

                    b.HasIndex("FromStageId");

                    b.HasIndex("ToStageId");

                    b.ToTable("DealHistory");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealPipelineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.ToTable("DealPipelines");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealStageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<TimeSpan>("ExpectedDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("PipelineId");

                    b.HasIndex("PipelineId", "Order")
                        .IsUnique();

                    b.ToTable("DealStages");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.PropertyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Area")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Rooms")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Price");

                    b.HasIndex("Type");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.PropertyImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.RequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PropertyId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.ClientDocumentEntity", b =>
                {
                    b.HasOne("PropertyStore.DataAccess.Entities.ClientEntity", null)
                        .WithMany("Documents")
                        .HasForeignKey("ClientEntityId");

                    b.HasOne("PropertyStore.DataAccess.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.DealEntity", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Deal");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealEntity", b =>
                {
                    b.HasOne("PropertyStore.DataAccess.Entities.ClientEntity", "Client")
                        .WithMany("Deals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.DealStageEntity", "CurrentStage")
                        .WithMany("Deals")
                        .HasForeignKey("CurrentStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.DealPipelineEntity", "Pipeline")
                        .WithMany("Deals")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.PropertyEntity", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PropertyStore.DataAccess.Entities.RequestEntity", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("CurrentStage");

                    b.Navigation("Pipeline");

                    b.Navigation("Property");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealHistoryEntity", b =>
                {
                    b.HasOne("PropertyStore.DataAccess.Entities.DealEntity", "Deal")
                        .WithMany("History")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.DealStageEntity", "FromStage")
                        .WithMany()
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.DealStageEntity", "ToStage")
                        .WithMany()
                        .HasForeignKey("ToStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("FromStage");

                    b.Navigation("ToStage");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealStageEntity", b =>
                {
                    b.HasOne("PropertyStore.DataAccess.Entities.DealPipelineEntity", "Pipeline")
                        .WithMany("Stages")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.PropertyImageEntity", b =>
                {
                    b.HasOne("PropertyStore.DataAccess.Entities.PropertyEntity", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.RequestEntity", b =>
                {
                    b.HasOne("PropertyStore.DataAccess.Entities.ClientEntity", "Client")
                        .WithMany("Requests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyStore.DataAccess.Entities.PropertyEntity", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("Documents");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealEntity", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealPipelineEntity", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.DealStageEntity", b =>
                {
                    b.Navigation("Deals");
                });

            modelBuilder.Entity("PropertyStore.DataAccess.Entities.PropertyEntity", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
